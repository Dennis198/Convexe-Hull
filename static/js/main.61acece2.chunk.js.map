{"version":3,"sources":["ConvexeHull/Help/drawMethods.js","ConvexeHull/Plane/Point/point.js","ConvexeHull/Help/calculations.js","ConvexeHull/Algorithms/gift-wrapping-algorithm.js","ConvexeHull/Algorithms/naive.js","ConvexeHull/Plane/plane.js","ConvexeHull/convexehull.js","App.js","reportWebVitals.js","index.js"],"names":["reset","canvas","document","getElementById","context","getContext","beginPath","fillStyle","fillRect","width","height","stroke","drawPoint","x","y","size","color","arc","Math","PI","fill","drawLine","start","end","strokeStyle","lineWidth","moveTo","lineTo","drawPolygonLines","hull","i","length","Point","this","crossProductZ","vectorOne","vectorTwo","subtract","pointA","pointB","orientationTest","firstPoint","secondPoint","thirdPoint","GiftWrappingAlgorithm","points","sort","a","b","sucess","leftMost","index","nextIndex","nextVertex","currentVertex","push","calculateNextStep","drawFinish","intervallID","setInterval","drawCurrentState","checking","stop","draw","id","clearInterval","NaiveAlgorithm","success","hullLines","checked","startIdx","endIdx","j","find","obj","isLineOnHull","k","i_ONHOLD","j_ONHOLD","p","Plane","algorithm","isFinished","instantCompute","ConvexeHull","props","state","plane","isRunning","algoMode","setState","giftWrapping","naive","isAlgorithmFinished","setTimeout","interval_id","window","random","addPoint","e","pos","getMousePos","evt","rect","getBoundingClientRect","clientX","left","clientY","top","parseInt","target","value","resetHull","className","onChange","val","switchAlgoMode","Button","disabled","variant","onClick","fastCompute","animation","stopAll","addRandomPoints","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61acece2.chunk.js","sourcesContent":["/**\r\n * This File contains all Methods which are needed for drawing on the Canvas\r\n */\r\n\r\n //Resets the Canvas to the inital state\r\nexport function reset(){\r\n    var canvas = document.getElementById(\"2d-plane\");\r\n    var context = canvas.getContext(\"2d\");\r\n    context.beginPath();\r\n    context.fillStyle = \"#ADD8E6\";\r\n    context.fillRect(0,0,canvas.width,canvas.height);\r\n    context.stroke(); \r\n}\r\n\r\n//Draws a Point at location x,y with the size size and color color\r\nexport function drawPoint(x, y, size=4, color=\"black\"){\r\n    var canvas = document.getElementById(\"2d-plane\");\r\n    var context = canvas.getContext(\"2d\");\r\n    context.fillStyle = color;//`#DC143C`;//Red\r\n    context.beginPath();\r\n    context.arc(x, y, size, 0, 2*Math.PI);\r\n    context.fill();\r\n}\r\n\r\n//Draws a Line from start to end with color\r\nexport function drawLine(start, end, color=\"black\"){\r\n    var canvas = document.getElementById(\"2d-plane\");\r\n    var context = canvas.getContext(\"2d\");\r\n    context.strokeStyle=color;\r\n    context.lineWidth=1;\r\n    context.beginPath();\r\n    context.moveTo(start.x, start.y);\r\n    context.lineTo(end.x, end.y);\r\n    context.stroke();\r\n}\r\n\r\n//Draws all Lines of the hull\r\nexport function  drawPolygonLines(hull, color=\"black\"){\r\n    var canvas = document.getElementById(\"2d-plane\");\r\n    var context = canvas.getContext(\"2d\");\r\n    context.strokeStyle=color;\r\n    context.lineWidth=1;\r\n    context.beginPath();\r\n    context.moveTo(hull[0].x,hull[0].y);\r\n    for(let i=1;i<hull.length;i++){\r\n        context.lineTo(hull[i].x,hull[i].y);\r\n        context.stroke();\r\n    }\r\n    context.lineTo(hull[0].x,hull[0].y);\r\n    context.stroke();\r\n}\r\n\r\n\r\n//Draws the and fills the hull\r\nexport function drawPolygon(hull){\r\n    if(hull.length<2) return;\r\n    var canvas = document.getElementById(\"2d-plane\");\r\n    var context = canvas.getContext(\"2d\");\r\n    context.beginPath();\r\n    context.moveTo(hull[0].x,hull[0].y);\r\n    for(let i=1;i<hull.length;i++){\r\n        context.lineTo(hull[i].x,hull[i].y);\r\n    }\r\n    context.fillStyle=\"rgba(220, 20, 60,0.3)\";\r\n    context.fill();\r\n}","/**\r\n * This File Contains the Information about a Point\r\n */\r\nimport {drawPoint} from \"../../Help/drawMethods\";\r\nexport default class Point{\r\n\r\n    constructor(x,y){\r\n        this.x=x;\r\n        this.y=y;\r\n    }\r\n\r\n    //Draws it self\r\n    draw(size=4,color=\"black\"){\r\n        drawPoint(this.x,this.y,size,color);\r\n    }\r\n}","/**\r\n * This File contains different vector based operations, CrossProduct, determinante, ...\r\n */\r\n\r\n //Computes the Z Komponent of the Crossproduct of to vectors\r\nexport function crossProductZ(vectorOne,vectorTwo){\r\n    return vectorOne.x*vectorTwo.y - vectorOne.y*vectorTwo.x;\r\n}\r\n\r\n//Subtracts two Points\r\nexport function subtract(pointA,pointB){\r\n    return {x:pointA.x-pointB.x,y:pointA.y-pointB.y}\r\n}\r\n\r\n // Check if the third Point is on the right of the line between\r\n//  firstpoint to secondpoint.( det = determinant)\r\nexport function orientationTest(firstPoint, secondPoint, thirdPoint){\r\n    let det = firstPoint.x*secondPoint.y*1+\r\n                firstPoint.y*1*thirdPoint.x+\r\n                1*secondPoint.x*thirdPoint.y-\r\n                thirdPoint.x*secondPoint.y*1-\r\n                thirdPoint.y*1*firstPoint.x-\r\n                1*secondPoint.x*firstPoint.y;\r\n    return det<0;\r\n}","/**\r\n * This file computes the Gift Wrapping Algorithm to Compute the Convexe Hull\r\n */\r\nimport {drawPolygonLines, reset, drawLine} from \"../Help/drawMethods\";\r\nimport {subtract, crossProductZ} from \"../Help/calculations\";\r\n\r\nexport default class GiftWrappingAlgorithm{\r\n    constructor(points){\r\n        this.points=points.sort((a,b) => a.x-b.x);\r\n        this.sucess=false;\r\n        this.hull=[];\r\n        this.leftMost=this.points[0];\r\n        this.index=2;\r\n        this.nextIndex=-1;\r\n        this.nextVertex=this.points[1];\r\n        this.currentVertex=this.leftMost;\r\n        this.hull.push(this.leftMost);\r\n    }\r\n\r\n    //Computes the Algorithm \"fast\" (Only the finished Hull is displayed)\r\n    instantCompute(){\r\n        this.sucess=false\r\n        while(!this.sucess){\r\n            this.calculateNextStep();\r\n        }\r\n        this.drawFinish();\r\n    }\r\n\r\n    //Computes the Algorithm \"slow\" (Every Step is displayed)\r\n    start(){\r\n        let intervallID = setInterval(() => {\r\n            this.drawCurrentState();\r\n            this.calculateNextStep(intervallID);           \r\n        }, 100); \r\n    }\r\n\r\n    //Calculates the Nect Step of the Algorithm\r\n    calculateNextStep(intervallID=null){\r\n        let checking = this.points[this.index];\r\n        let a = subtract(this.nextVertex, this.currentVertex)\r\n        let b = subtract(checking, this.currentVertex);\r\n        if(crossProductZ(a,b)<0){\r\n            this.nextVertex=checking;\r\n            this.nextIndex=this.index;\r\n        }\r\n        this.index++;\r\n        if(this.index === this.points.length){\r\n            if(this.nextVertex === this.leftMost){\r\n                this.drawFinish();\r\n                this.stop(intervallID);\r\n\r\n            } else {\r\n                this.hull.push(this.nextVertex)\r\n                this.currentVertex=this.nextVertex;\r\n                this.index = 0;\r\n                this.nextVertex = this.leftMost;\r\n            }\r\n        } \r\n    }\r\n\r\n    //Draws the Current State (all Points, current points of the hull, and lines)\r\n    drawCurrentState(){\r\n        reset();\r\n        drawPolygonLines(this.hull, \"red\");       \r\n        drawLine(this.currentVertex, this.nextVertex, \"green\");\r\n        drawLine(this.currentVertex,this.points[this.index]);\r\n        for(let i=0;i<this.points.length;i++){\r\n            this.points[i].draw();\r\n        }\r\n\r\n        for(let i=0;i<this.hull.length;i++){\r\n            this.hull[i].draw(5,\"red\");\r\n        }\r\n    }\r\n\r\n    //Draws the Finished Convexe Hull\r\n    drawFinish(){\r\n        reset();\r\n        drawPolygonLines(this.hull, \"red\");\r\n        for(let i=0;i<this.points.length;i++){\r\n            this.points[i].draw();\r\n        }\r\n\r\n        for(let i=0;i<this.hull.length;i++){\r\n            this.hull[i].draw(5,\"red\");\r\n        }\r\n    }\r\n\r\n    //Stops the Interval and sets success to true (Convexe Hull is Found)\r\n    stop(id){\r\n        clearInterval(id);\r\n        this.sucess=true;\r\n    }\r\n}\r\n","/**\r\n * This File Computes a Naive Algorithm to find the Convexe Hull (O(n^3))\r\n */\r\nimport {reset, drawLine} from \"../Help/drawMethods\";\r\nimport {orientationTest} from \"../Help/calculations\";\r\n\r\nexport default class NaiveAlgorithm{\r\n    constructor(points){\r\n        this.points=points;\r\n        this.success=false;\r\n        this.hull=[];\r\n        this.hullLines=[];\r\n        this.checked = [{startIdx:-1, endIdx:-1}];//To Prevent check Point j->i if i->j is already on the convexe hull\r\n    }\r\n\r\n    //Computes the Algorithm \"fast\" (Only the finished Hull is displayed)\r\n    instantCompute(){\r\n        for(let i=0;i<this.points.length;i++){\r\n            for(let j=0;j<this.points.length;j++){\r\n                if(i===j) continue;\r\n                //To Prevent check Point j->i if i->j is already on the convexe hull\r\n                var result = this.checked.find(obj => {\r\n                    return obj.startIdx === j && obj.endIdx ===i;\r\n                })\r\n                if(result) continue;\r\n                let isLineOnHull=true;\r\n                for(let k=0;k<this.points.length;k++){\r\n                    if(i===k || j===k) continue;\r\n                    if(orientationTest(this.points[i], this.points[j], this.points[k])){\r\n                        isLineOnHull=false;\r\n                        break;\r\n                    }\r\n                }\r\n                if(isLineOnHull===true){\r\n                    this.checked.push({startIdx:i, endIdx:j});\r\n                    this.hull.push(this.points[i]);\r\n                    this.hullLines.push({start:this.points[i], end: this.points[j]});\r\n                } else {\r\n\r\n                }\r\n            }\r\n        }\r\n        this.drawFinish();\r\n        this.stop(); \r\n    }\r\n\r\n    //Computes the Algorithm \"slow\" (Every Step is displayed)\r\n    start(){\r\n        let i=0;\r\n        let j=0;\r\n        let k=0;\r\n        let i_ONHOLD=false;\r\n        let j_ONHOLD=false;\r\n        let length=this.points.length;\r\n        let isLineOnHull;\r\n\r\n        let intervallID = setInterval(() => {\r\n            reset();\r\n            if(i===j){\r\n                j++;\r\n            }else{\r\n                var result = this.checked.find(obj => {\r\n                    return obj.startIdx === j && obj.endIdx ===i;\r\n                })\r\n                if(!result){\r\n                    if(!j_ONHOLD) isLineOnHull=true;\r\n                        i_ONHOLD=true;\r\n                        j_ONHOLD=true;\r\n                        drawLine(this.points[i],this.points[j]);\r\n                        if(i!==k && j!==k){\r\n                            drawLine(this.points[i],this.points[k],\"green\");\r\n                            if(orientationTest(this.points[i], this.points[j], this.points[k])){\r\n                                isLineOnHull=false;\r\n                            }\r\n                            k++;\r\n                        } else {\r\n                            k++;\r\n                        }\r\n                        if(k===length){\r\n                            j_ONHOLD=false;\r\n                            k=0;\r\n                        }\r\n                    if(isLineOnHull===true && k===0){\r\n                        this.checked.push({startIdx:i, endIdx:j});\r\n                        this.hull.push(this.points[i]);\r\n                        this.hullLines.push({start:this.points[i], end: this.points[j]});\r\n                        if(!j_ONHOLD)j++;\r\n                    } else {\r\n                        if(!j_ONHOLD)j++;\r\n                    }\r\n                } else {\r\n                    if(!j_ONHOLD)j++;\r\n                }\r\n            }\r\n            if(j===length){\r\n                i_ONHOLD=false;\r\n                j=0;\r\n            }\r\n            if(!i_ONHOLD&&j===0){\r\n                i++;\r\n                j=0;\r\n            }\r\n\r\n            if(i===length)this.stop(intervallID);\r\n            for(let p=0;p<this.hullLines.length;p++){\r\n                drawLine(this.hullLines[p].start,this.hullLines[p].end, \"red\");\r\n            }\r\n            for(let p=0;p<this.points.length;p++){\r\n                this.points[p].draw();\r\n            }\r\n    \r\n            for(let p=0;p<this.hull.length;p++){\r\n                this.hull[p].draw(5,\"red\");\r\n            }\r\n        }, 100);\r\n        this.drawFinish();\r\n    }\r\n\r\n   //Draws the Finished Convexe Hull\r\n    drawFinish(){\r\n        reset();\r\n        for(let i=0;i<this.hullLines.length;i++){\r\n            drawLine(this.hullLines[i].start,this.hullLines[i].end,\"red\");\r\n        }\r\n        for(let i=0;i<this.points.length;i++){\r\n            this.points[i].draw();\r\n        }\r\n\r\n        for(let i=0;i<this.hull.length;i++){\r\n            this.hull[i].draw(5,\"red\");\r\n        }\r\n    }\r\n\r\n    //Stops the Interval and sets success to true (Convexe Hull is Found)\r\n    stop(id){\r\n        clearInterval(id);\r\n        this.sucess=true;\r\n    }\r\n}\r\n","/**\r\n * This File Handles the Start of the different Algoritms\r\n */\r\n\r\nimport Point from \"./Point/point\";\r\nimport GiftWrappingAlgorithm from \"../Algorithms/gift-wrapping-algorithm\";\r\nimport NaiveAlgorithm from \"../Algorithms/naive\";\r\nimport {reset} from \"../Help/drawMethods\";\r\n\r\nexport default class Plane{\r\n    constructor(){\r\n        this.points=[];\r\n        this.algorithm=null;\r\n        this.success=false;\r\n    }\r\n\r\n    //Adds a Point to the variable this.points\r\n    addPoint(x,y){\r\n        this.points.push(new Point(x,y));\r\n        this.draw();\r\n    }\r\n\r\n    //Computes the Naive Algorithm to find the Convexe Hull\r\n    naive(isFinished){\r\n        if(this.points.length<3){\r\n            return\r\n        }\r\n        this.algorithm = new NaiveAlgorithm(this.points);\r\n        if(isFinished){\r\n            this.algorithm.instantCompute();    \r\n        } else {\r\n            this.algorithm.start();\r\n        }\r\n    }\r\n\r\n    //Computes the Gift Wrapping Algorithm to find the Convexe Hull\r\n    giftWrapping(isFinished){\r\n        if(this.points.length<3){\r\n            return\r\n        }\r\n        this.algorithm = new GiftWrappingAlgorithm(this.points);\r\n        if(isFinished){\r\n            this.algorithm.instantCompute();    \r\n        } else {\r\n            this.algorithm.start();\r\n        }\r\n    }\r\n\r\n    //Return True if the Convexe hull is found\r\n    isAlgorithmFinished(){\r\n        if(this.algorithm==null) return null;\r\n        return this.algorithm.sucess;\r\n    }\r\n\r\n    //Resets the Canvas\r\n    reset(){\r\n       reset();\r\n    }\r\n\r\n    //Draw all Points\r\n    draw(){\r\n        this.reset();\r\n        for(let i=0;i<this.points.length;i++){\r\n            this.points[i].draw();\r\n        }\r\n    }\r\n}","import \"./conexehull.css\";\r\nimport React from 'react';\r\nimport Plane from \"./Plane/plane\";\r\nimport {Button} from '@material-ui/core';\r\n\r\nconst CANVAS_WIDTH=800;\r\nconst CANVAS_HEIGHT=400;\r\n\r\nconst NONE_ALGO=-1;\r\nconst GIFT_WRAPPING=0;\r\nconst NAIVE=1;\r\n\r\nexport default class ConvexeHull extends React.Component{\r\n    intervallID=0\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            plane: new Plane(),\r\n            isRunning:false,\r\n            isFinished:false,\r\n            algoMode: NONE_ALGO,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.plane.reset();\r\n    }\r\n\r\n    // Computes the Algorithm \"fast\" (Only the finised State will be displayed)\r\n    fastCompute(){\r\n        this.setState({isFinished:true});\r\n        switch(this.state.algoMode){\r\n            case GIFT_WRAPPING:\r\n                this.state.plane.giftWrapping(true);\r\n                break;\r\n            case NAIVE:\r\n                this.state.plane.naive(true);\r\n                break;\r\n            default:\r\n                this.setState({isRunning:false})\r\n                return;\r\n        }\r\n        \r\n    }\r\n\r\n    //Computes the Algorithms \"slowly\" (every stape will be displayed)\r\n    animation(){\r\n        this.setState({isRunning:true})\r\n        switch(this.state.algoMode){\r\n            case GIFT_WRAPPING:\r\n                this.state.plane.giftWrapping(false);\r\n                this.intervallID = setInterval(() => {\r\n                    if(this.state.plane.isAlgorithmFinished()){\r\n                        this.stop(this.intervallID);\r\n                    } \r\n                },50);\r\n                break;\r\n            case NAIVE:\r\n                this.state.plane.naive(false);\r\n                this.intervallID = setInterval(() => {\r\n                    if(this.state.plane.isAlgorithmFinished()){\r\n                        this.stop(this.intervallID);\r\n                    } \r\n                },50);\r\n                break;\r\n            default:\r\n                this.setState({isRunning:false})\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    //Resets only the ConvexeHull from the Canvas (Not the points)\r\n    resetHull(){\r\n        this.state.plane.draw();\r\n        this.setState({isFinished:false});\r\n    }\r\n\r\n    //Resets the every thing on the Canvas (Points, lines,...)\r\n    reset(){\r\n        this.setState({isRunning:false, isFinished:false, plane:new Plane()});\r\n        setTimeout(() => {\r\n            this.state.plane.draw();\r\n        },10);      \r\n    }\r\n\r\n    //Stops the Animation of the  Algorithm\r\n    stop(id){\r\n        clearInterval(id);\r\n        this.setState({isRunning:false, isFinished:true});\r\n    }\r\n\r\n    //Stops all Running Intervals\r\n    stopAll(){\r\n        var interval_id = window.setInterval(\"\", 9999); // Get a reference to the last\r\n                                                // interval +1\r\n        for (var i = 1; i < interval_id; i++)\r\n            window.clearInterval(i);\r\n        this.setState({isRunning:false});\r\n        if(!this.state.isFinished) this.state.plane.draw();\r\n    }\r\n\r\n    //Add Random Points in the Canvas\r\n    addRandomPoints(){\r\n        for(let i=0;i< 10;i++){\r\n            let x = Math.random()*CANVAS_WIDTH;\r\n            let y = Math.random()*CANVAS_HEIGHT;\r\n            this.state.plane.addPoint(x,y);\r\n        }\r\n    }\r\n\r\n    //Add on Click Points in the Canvas. And if this.state.isFinished===true then the new ConvexeHUll\r\n    //will be compute immediatly\r\n    addPoint(e){\r\n        var canvas = document.getElementById(\"2d-plane\");\r\n        var pos = this.getMousePos(canvas, e);\r\n        this.state.plane.addPoint(pos.x,pos.y);\r\n        if(this.state.isFinished){\r\n            switch (this.state.algoMode){\r\n                case GIFT_WRAPPING:\r\n                    this.state.plane.giftWrapping(true);\r\n                    break;\r\n                case NAIVE:\r\n                    this.state.plane.naive(true);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Gets the Mouse position on the Canvas\r\n    getMousePos(canvas, evt) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n        x: evt.clientX - rect.left,\r\n        y: evt.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    //Handler for Switching the Algorithm\r\n    switchAlgoMode(e){\r\n        this.setState({algoMode: parseInt(e.target.value)});\r\n        this.resetHull();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"convexehull\">\r\n                <h1>Convexe Hull</h1>\r\n                <select className=\"select-css\" onChange={(e,val) => this.switchAlgoMode(e,val)}>\r\n                    <option value=\"-1\">Select Algorithm</option>\r\n                    <option value={GIFT_WRAPPING}>Gift Wrapping</option>\r\n                    <option value={NAIVE}>Naive</option>\r\n                </select>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" color=\"primary\" onClick={() => this.fastCompute()}>Fast Compute</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" color=\"primary\" onClick={() => this.animation()}>Animation</Button>\r\n                <Button disabled={!this.state.isRunning} variant=\"outlined\" color=\"secondary\" onClick={() => this.stopAll()}>Stop</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={() => this.addRandomPoints()}>Random Points</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={()=> this.resetHull()}>Reset Hull</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={()=> this.reset()}>Reset</Button>\r\n        <       h4>{this.state.isRunning? \"Compute...\": \"Ready\"}</h4>\r\n                <div className=\"convexehull__canvas\">\r\n                    <canvas className=\"convexehull_canvas__2dplane\" id=\"2d-plane\" width={CANVAS_WIDTH} height={CANVAS_HEIGHT}\r\n                    onClick={this.state.isRunning ?() => null :(e) => this.addPoint(e)}\r\n                    ></canvas>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import './App.css';\nimport ConvexeHull from \"./ConvexeHull/convexehull\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ConvexeHull></ConvexeHull>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}