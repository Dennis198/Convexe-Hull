[{"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\index.js":"1","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\App.js":"2","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\reportWebVitals.js":"3","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\convexehull.js":"4","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Plane\\plane.js":"5","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Plane\\Point\\point.js":"6","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Algorithms\\gift-wrapping-algorithm.js":"7","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Help\\drawMethods.js":"8","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Help\\calculations.js":"9","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Algorithms\\naive.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":201,"mtime":1607762913568,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":6134,"mtime":1607940261979,"results":"15","hashOfConfig":"12"},{"size":1704,"mtime":1607939759025,"results":"16","hashOfConfig":"12"},{"size":323,"mtime":1607939842839,"results":"17","hashOfConfig":"12"},{"size":2936,"mtime":1607939329670,"results":"18","hashOfConfig":"12"},{"size":2084,"mtime":1607939053601,"results":"19","hashOfConfig":"12"},{"size":898,"mtime":1607939155183,"results":"20","hashOfConfig":"12"},{"size":4839,"mtime":1607939512453,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1huvptn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\index.js",[],["44","45"],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\App.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\reportWebVitals.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\convexehull.js",["46"],"import \"./conexehull.css\";\r\nimport React from 'react';\r\nimport Plane from \"./Plane/plane\";\r\nimport {Button} from '@material-ui/core';\r\n\r\nconst CANVAS_WIDTH=800;\r\nconst CANVAS_HEIGHT=400;\r\n\r\nconst NONE_ALGO=-1;\r\nconst GIFT_WRAPPING=0;\r\nconst NAIVE=1;\r\n\r\nexport default class ConvexeHull extends React.Component{\r\n    intervallID=0\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            plane: new Plane(),\r\n            isRunning:false,\r\n            isFinished:false,\r\n            algoMode: NONE_ALGO,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.plane.reset();\r\n    }\r\n\r\n    // Computes the Algorithm \"fast\" (Only the finised State will be displayed)\r\n    fastCompute(){\r\n        this.setState({isFinished:true});\r\n        switch(this.state.algoMode){\r\n            case GIFT_WRAPPING:\r\n                this.state.plane.giftWrapping(true);\r\n                break;\r\n            case NAIVE:\r\n                this.state.plane.naive(true);\r\n                break;\r\n            default:\r\n                this.setState({isRunning:false})\r\n                return;\r\n        }\r\n        \r\n    }\r\n\r\n    //Computes the Algorithms \"slowly\" (every stape will be displayed)\r\n    animation(){\r\n        this.setState({isRunning:true})\r\n        switch(this.state.algoMode){\r\n            case GIFT_WRAPPING:\r\n                this.state.plane.giftWrapping(false);\r\n                this.intervallID = setInterval(() => {\r\n                    if(this.state.plane.isAlgorithmFinished()){\r\n                        this.stop(this.intervallID);\r\n                    } \r\n                },50);\r\n                break;\r\n            case NAIVE:\r\n                this.state.plane.naive(false);\r\n                this.intervallID = setInterval(() => {\r\n                    if(this.state.plane.isAlgorithmFinished()){\r\n                        this.stop(this.intervallID);\r\n                    } \r\n                },50);\r\n                break;\r\n            default:\r\n                this.setState({isRunning:false})\r\n                return;\r\n        }\r\n\r\n    }\r\n\r\n    //Resets only the ConvexeHull from the Canvas (Not the points)\r\n    resetHull(){\r\n        this.state.plane.draw();\r\n        this.setState({isFinished:false});\r\n    }\r\n\r\n    //Resets the every thing on the Canvas (Points, lines,...)\r\n    reset(){\r\n        this.setState({isRunning:false, isFinished:false, plane:new Plane()});\r\n        setTimeout(() => {\r\n            this.state.plane.draw();\r\n        },10);      \r\n    }\r\n\r\n    //Stops the Animation of the  Algorithm\r\n    stop(id){\r\n        clearInterval(id);\r\n        this.setState({isRunning:false, isFinished:true});\r\n    }\r\n\r\n    //Stops all Running Intervals\r\n    stopAll(){\r\n        var interval_id = window.setInterval(\"\", 9999); // Get a reference to the last\r\n                                                // interval +1\r\n        for (var i = 1; i < interval_id; i++)\r\n            window.clearInterval(i);\r\n        this.setState({isRunning:false});\r\n        if(!this.state.isFinished) this.state.plane.draw();\r\n    }\r\n\r\n    //Add Random Points in the Canvas\r\n    addRandomPoints(){\r\n        for(let i=0;i< 10;i++){\r\n            let x = Math.random()*CANVAS_WIDTH;\r\n            let y = Math.random()*CANVAS_HEIGHT;\r\n            this.state.plane.addPoint(x,y);\r\n        }\r\n    }\r\n\r\n    //Add on Click Points in the Canvas. And if this.state.isFinished===true then the new ConvexeHUll\r\n    //will be compute immediatly\r\n    addPoint(e){\r\n        var canvas = document.getElementById(\"2d-plane\");\r\n        var pos = this.getMousePos(canvas, e);\r\n        this.state.plane.addPoint(pos.x,pos.y);\r\n        if(this.state.isFinished){\r\n            switch (this.state.algoMode){\r\n                case GIFT_WRAPPING:\r\n                    this.state.plane.giftWrapping(true);\r\n                    break;\r\n                case NAIVE:\r\n                    this.state.plane.naive(true);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Gets the Mouse position on the Canvas\r\n    getMousePos(canvas, evt) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n        x: evt.clientX - rect.left,\r\n        y: evt.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    //Handler for Switching the Algorithm\r\n    switchAlgoMode(e){\r\n        this.setState({algoMode: parseInt(e.target.value)});\r\n        this.resetHull();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"convexehull\">\r\n                <h1>Convexe Hull</h1>\r\n                <select className=\"select-css\" onChange={(e,val) => this.switchAlgoMode(e,val)}>\r\n                    <option value=\"-1\">Select Algorithm</option>\r\n                    <option value={GIFT_WRAPPING}>Gift Wrapping</option>\r\n                    <option value={NAIVE}>Naive</option>\r\n                </select>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" color=\"primary\" onClick={() => this.fastCompute()}>Fast Compute</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" color=\"primary\" onClick={() => this.animation()}>Animation</Button>\r\n                <Button disabled={!this.state.isRunning} variant=\"outlined\" color=\"secondary\" onClick={() => this.stopAll()}>Stop</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={() => this.addRandomPoints()}>Random Points</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={()=> this.resetHull()}>Reset Hull</Button>\r\n                <Button disabled={this.state.isRunning} variant=\"outlined\" onClick={()=> this.reset()}>Reset</Button>\r\n        <       h4>{this.state.isRunning? \"Compute...\": \"Ready\"}</h4>\r\n                <div className=\"convexehull__canvas\">\r\n                    <canvas className=\"convexehull_canvas__2dplane\" id=\"2d-plane\" width={CANVAS_WIDTH} height={CANVAS_HEIGHT}\r\n                    onClick={this.state.isRunning ?() => null :(e) => this.addPoint(e)}\r\n                    ></canvas>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Plane\\plane.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Plane\\Point\\point.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Algorithms\\gift-wrapping-algorithm.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Help\\drawMethods.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Help\\calculations.js",[],"C:\\Users\\Dennis\\Documents\\GitHub\\Convexe-Hull\\Conexe-Hull\\convexe-hull\\src\\ConvexeHull\\Algorithms\\naive.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":95,"column":27,"nodeType":"53","messageId":"54","endLine":95,"endColumn":55},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-implied-eval","Implied eval. Consider passing a function instead of a string.","CallExpression","impliedEval","no-global-assign","no-unsafe-negation"]